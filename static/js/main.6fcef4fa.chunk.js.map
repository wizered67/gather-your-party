{"version":3,"sources":["serviceWorker.js","App/pages/Layout.js","App/pages/Home.js","App/pages/List.js","App/pages/Registration.js","App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Layout","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Layout_Header","props","children","Layout_Footer","Component","Header","_this","call","updateLoggedIn","setState","loggedIn","STITCH_CLIENT","auth","isLoggedIn","getLoginOrLogout","state","onClick","logout","style","color","loginErrorMessage","onSubmit","handleSubmit","type","name","email","onChange","handleChange","password","Link","to","then","event","target","defineProperty","preventDefault","_this$state","credential","UserPasswordCredential","loginWithCredential","authedId","console","log","concat","loginSuccess","catch","err","loginError","error","errorMessage","loginOrOut","Footer","Home","className","Layout_Layout","variant","List","getList","list","length","map","item","Registration","confirmPassword","Stitch","defaultAppClient","getProviderClient","UserPasswordAuthProviderClient","factory","registerWithEmail","registerErrorMessage","initializeDefaultAppClient","App","Switch","Route","exact","path","component","render","BrowserRouter","basename","process","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fcef4fa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Stitch, UserPasswordCredential } from \"mongodb-stitch-browser-sdk\";\r\nexport class Layout extends Component {\r\n  render() {\r\n      return(\r\n         <div>\r\n            <Header />\r\n               { this.props.children }\r\n            <Footer />\r\n         </div>\r\n      );\r\n  }\r\n}\r\nclass Header extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      loggedIn: false,\r\n      loginErrorMessage: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateLoggedIn();\r\n  }\r\n\r\n  updateLoggedIn = () => {\r\n    this.setState({loggedIn: STITCH_CLIENT.auth.isLoggedIn});\r\n  }\r\n\r\n  render() {\r\n    const loginOrOut = this.getLoginOrLogout();\r\n      return (\r\n          <div>\r\n            <h1>HEADER</h1>\r\n            {loginOrOut}\r\n          </div>\r\n        );\r\n  }\r\n\r\n  getLoginOrLogout = () => {\r\n    if (!this.state.loggedIn) {\r\n      return (\r\n      <div>\r\n      <p style={{color: \"red\"}}>{this.state.loginErrorMessage}</p>\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          E-mail:\r\n          <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n          Password:\r\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n       <Link to={'./register'}>Register</Link>\r\n      </div>)\r\n    }\r\n    return <button onClick={this.logout}>Logout</button>;\r\n  }\r\n\r\n  logout = () => {\r\n    STITCH_CLIENT.auth.logout().then(() => this.updateLoggedIn());\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { email, password } = this.state;\r\n    const credential = new UserPasswordCredential(email, password);\r\n    STITCH_CLIENT\r\n      .auth\r\n      .loginWithCredential(credential).then(authedId => {\r\n         console.log(`successfully logged in with id: ${authedId}`)\r\n      }).then(() => this.loginSuccess())\r\n      .catch(err => this.loginError(err));\r\n  }\r\n\r\n  loginSuccess = () => {\r\n    this.updateLoggedIn();\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: \"\"});\r\n  }\r\n\r\n  loginError = (err) => {\r\n    console.error(`login error: ${err}`);\r\n    const errorMessage = `login error: ${err}`;\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: errorMessage});\r\n  }\r\n}\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n      return (<p>Copyright 2018</p>);\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Layout } from \"./Layout\";\r\n\r\nclass Home extends Component {\r\n  \r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          <h1>Project Home</h1>\r\n          {/* Link to List.js */}\r\n          <Link to={'./list'}>\r\n            <button variant=\"raised\">\r\n                My List\r\n            </button>\r\n          </Link>  \r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Layout } from \"./Layout\";\r\n\r\nclass List extends Component {\r\n  // Initialize the state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      list: []\r\n    }\r\n  }\r\n\r\n  // Fetch the list on first mount\r\n  componentDidMount() {\r\n    this.getList();\r\n  }\r\n\r\n  // Retrieves the list of items from the Express app\r\n  getList = () => {\r\n    this.setState({list: [\"hello\", \"world\", \"okay\"]});\r\n  }\r\n\r\n  render() {\r\n    const { list } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <h1>List of Items</h1>\r\n        {/* Check to see if any items are found*/}\r\n        {list.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {list.map((item) => {\r\n              return(\r\n                <div>\r\n                  {item}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>No List Items Found</h2>\r\n          </div>\r\n        )\r\n      }\r\n      </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\nimport { Layout } from \"./Layout\";\r\nimport { STITCH_CLIENT } from \"../App\";\r\nimport { Stitch, UserPasswordAuthProviderClient } from \"mongodb-stitch-browser-sdk\";\r\nclass Registration extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      loggedIn: false,\r\n      registerErrorMessage: \"\",\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <p style={{color: \"red\"}}>{this.state.registerErrorMessage}</p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            E-mail:\r\n            <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n            Password:\r\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n            Confirm Password:\r\n            <input type=\"password\" name=\"confirmPassword\" value={this.state.confirmPassword} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { email, password, confirmPassword } = this.state;\r\n    if (password !== confirmPassword) {\r\n      this.setState({registerErrorMessage: \"Passwords did not match.\"});\r\n      return;\r\n    }\r\n    // const credential = new UserPasswordCredential(email, password);\r\n    // STITCH_CLIENT\r\n    //   .auth\r\n    //   .loginWithCredential(credential).then(authedId => {\r\n    //      console.log(`successfully logged in with id: ${authedId}`)\r\n    //   }).then(() => this.loginSuccess())\r\n    //   .catch(err => this.loginError(err));\r\n    const emailPassClient = Stitch.defaultAppClient.auth\r\n      .getProviderClient(UserPasswordAuthProviderClient.factory);\r\n\r\n    emailPassClient.registerWithEmail(email, password)\r\n      .then(() => {\r\n         console.log(\"Successfully sent account confirmation email!\");\r\n      })\r\n      .catch(err => {\r\n         console.log(\"Error registering new user:\", err);\r\n      });\r\n  }\r\n\r\n  loginSuccess = () => {\r\n    this.updateLoggedIn();\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: \"\"});\r\n  }\r\n\r\n  loginError = (err) => {\r\n    console.error(`login error: ${err}`);\r\n    const errorMessage = `login error: ${err}`;\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: errorMessage});\r\n  }\r\n}\r\nexport default Registration;","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\nimport './App.css';\nimport Home from './pages/Home';\nimport List from './pages/List';\nimport Registration from \"./pages/Registration\"\n\nconst APP_ID = \"gather-your-party-qnzcm\";\nexport const STITCH_CLIENT = Stitch.initializeDefaultAppClient(APP_ID);\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/list' component={List}/>\n          <Route path=\"/register\" component={Registration}/>\n        </Switch>\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport './index.css';\nimport App from './App/App';\n\nrender((\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}