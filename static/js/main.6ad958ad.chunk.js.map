{"version":3,"sources":["serviceWorker.js","App/pages/Layout.js","App/pages/Home.js","App/pages/List.js","App/pages/Registration.js","App/pages/NewPost.js","App/pages/PostContent.js","App/pages/PostStream.js","App/pages/NotificationContent.js","App/pages/NotificationStream.js","App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Layout","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Layout_Header","props","children","Layout_Footer","Component","Header","_this","call","updateLoggedIn","setState","loggedIn","STITCH_CLIENT","auth","isLoggedIn","getLoginOrLogout","state","onClick","logout","style","color","loginErrorMessage","onSubmit","handleSubmit","type","name","email","onChange","handleChange","password","Link","to","then","event","target","defineProperty","preventDefault","_this$state","credential","UserPasswordCredential","loginWithCredential","authedId","console","log","concat","loginSuccess","catch","err","loginError","error","errorMessage","loginOrOut","Footer","Home","className","Layout_Layout","variant","List","getList","list","length","map","item","Registration","confirmPassword","Stitch","defaultAppClient","getProviderClient","UserPasswordAuthProviderClient","factory","registerWithEmail","registerError","registerErrorMessage","message","resendConfirmationEmail","NewPost","title","content","user","collection","MDB","db","_this$state2","latitude","longitude","coordinates","parseFloat","insertOne","owner_id","id","interested","history","push","_this2","navigator","geolocation","getCurrentPosition","position","coords","rows","cols","deg2rad","deg","Math","PI","PostContent","viewPost","date","Date","distance","postFound","_id","find","asArray","postContent","lat1","lon1","lat2","lon2","dLat","dLon","sin","cos","atan2","sqrt","getDistanceFromLatLonInMiles","userLatitude","userLongitude","_this3","toFixed","PostStream","updateDistance","locationSet","geospatialQuery","$near","$geometry","limit","postIDs","post","PostContent_PostContent","NotificationContent","NotificationStream","cursor","sort","notifications","notification","NotificationContent_NotificationContent","toString","initializeDefaultAppClient","getServiceClient","RemoteMongoClient","App","Switch","Route","exact","path","component","render","BrowserRouter","basename","process","src_App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ad958ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Stitch, UserPasswordCredential } from \"mongodb-stitch-browser-sdk\";\r\nexport class Layout extends Component {\r\n  render() {\r\n      return(\r\n         <div>\r\n            <Header />\r\n               { this.props.children }\r\n            <Footer />\r\n         </div>\r\n      );\r\n  }\r\n}\r\nclass Header extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      loggedIn: false,\r\n      loginErrorMessage: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateLoggedIn();\r\n  }\r\n\r\n  updateLoggedIn = () => {\r\n    this.setState({loggedIn: STITCH_CLIENT.auth.isLoggedIn});\r\n  }\r\n\r\n  render() {\r\n    const loginOrOut = this.getLoginOrLogout();\r\n      return (\r\n          <div>\r\n            <h1>HEADER</h1>\r\n            {loginOrOut}\r\n            <Link to={'./'}>Home</Link>\r\n          </div>\r\n        );\r\n  }\r\n\r\n  getLoginOrLogout = () => {\r\n    if (!this.state.loggedIn) {\r\n      return (\r\n      <div>\r\n      <p style={{color: \"red\"}}>{this.state.loginErrorMessage}</p>\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          E-mail:\r\n          <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n          Password:\r\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n       <Link to={'./register'}>Register</Link>\r\n      </div>)\r\n    }\r\n    return <button onClick={this.logout}>Logout</button>;\r\n  }\r\n\r\n  logout = () => {\r\n    STITCH_CLIENT.auth.logout().then(() => this.updateLoggedIn());\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { email, password } = this.state;\r\n    const credential = new UserPasswordCredential(email, password);\r\n    STITCH_CLIENT\r\n      .auth\r\n      .loginWithCredential(credential).then(authedId => {\r\n         console.log(`successfully logged in with id: ${authedId}`)\r\n      }).then(() => this.loginSuccess())\r\n      .catch(err => this.loginError(err));\r\n  }\r\n\r\n  loginSuccess = () => {\r\n    this.updateLoggedIn();\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: \"\"});\r\n  }\r\n\r\n  loginError = (err) => {\r\n    console.error(`login error: ${err}`);\r\n    const errorMessage = `login error: ${err}`;\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: errorMessage});\r\n  }\r\n}\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n      return (<p>Copyright 2018</p>);\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Layout } from \"./Layout\";\r\n\r\nclass Home extends Component {\r\n  \r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          <h1>Project Home</h1>\r\n          {/* Link to List.js */}\r\n          <Link to={'./new-post'}>\r\n            <button variant=\"raised\">\r\n                Find Adventurers!\r\n            </button>\r\n          </Link>\r\n          <Link to={'./posts'}>\r\n            <button variant=\"raised\">\r\n                Find Campaigns!\r\n            </button>\r\n          </Link>\r\n          <Link to={'./notifications'}>\r\n            <button variant=\"raised\">\r\n                Notifications\r\n            </button>\r\n          </Link>  \r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Layout } from \"./Layout\";\r\n\r\nclass List extends Component {\r\n  // Initialize the state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      list: []\r\n    }\r\n  }\r\n\r\n  // Fetch the list on first mount\r\n  componentDidMount() {\r\n    this.getList();\r\n  }\r\n\r\n  // Retrieves the list of items from the Express app\r\n  getList = () => {\r\n    this.setState({list: [\"hello\", \"world\", \"okay\"]});\r\n  }\r\n\r\n  render() {\r\n    const { list } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <h1>List of Items</h1>\r\n        {/* Check to see if any items are found*/}\r\n        {list.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {list.map((item) => {\r\n              return(\r\n                <div>\r\n                  {item}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>No List Items Found</h2>\r\n          </div>\r\n        )\r\n      }\r\n      </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\nimport { Layout } from \"./Layout\";\r\nimport { STITCH_CLIENT } from \"../App\";\r\nimport { Stitch, UserPasswordAuthProviderClient } from \"mongodb-stitch-browser-sdk\";\r\nclass Registration extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      loggedIn: false,\r\n      registerErrorMessage: \"\",\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <p style={{color: \"red\"}}>{this.state.registerErrorMessage}</p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            E-mail:\r\n            <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n            Password:\r\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n            Confirm Password:\r\n            <input type=\"password\" name=\"confirmPassword\" value={this.state.confirmPassword} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { email, password, confirmPassword } = this.state;\r\n    if (password !== confirmPassword) {\r\n      this.setState({registerErrorMessage: \"Passwords did not match.\"});\r\n      return;\r\n    }\r\n    // const credential = new UserPasswordCredential(email, password);\r\n    // STITCH_CLIENT\r\n    //   .auth\r\n    //   .loginWithCredential(credential).then(authedId => {\r\n    //      console.log(`successfully logged in with id: ${authedId}`)\r\n    //   }).then(() => this.loginSuccess())\r\n    //   .catch(err => this.loginError(err));\r\n    const emailPassClient = Stitch.defaultAppClient.auth\r\n      .getProviderClient(UserPasswordAuthProviderClient.factory);\r\n\r\n    emailPassClient.registerWithEmail(email, password)\r\n      .then(() => {\r\n         console.log(\"Successfully sent account confirmation email!\");\r\n      })\r\n      .catch(err => {\r\n         console.log(\"Error registering new user:\", err);\r\n         this.registerError(err);\r\n      });\r\n  }\r\n\r\n  loginSuccess = () => {\r\n    this.updateLoggedIn();\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: \"\"});\r\n  }\r\n\r\n  registerError = (err) => {\r\n    if (err.message === \"name already in use\") {\r\n      const emailPassClient = Stitch.defaultAppClient.auth\r\n        .getProviderClient(UserPasswordAuthProviderClient.factory);\r\n      emailPassClient.resendConfirmationEmail(this.state.email);\r\n    } else {\r\n      const errorMessage = `login error: ${err}`;\r\n      this.setState({loginErrorMessage: errorMessage});\r\n    }\r\n    this.setState({email: \"\", password: \"\", confirmPassword: \"\"});\r\n  }\r\n}\r\nexport default Registration;","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout } from \"./Layout\";\r\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\r\nclass NewPost extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '', \r\n      content: \"Describe your campaign here!\",\r\n      latitude: 0,\r\n      longitude: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.setState({\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      })\r\n    });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <form onSubmit={this.handleSubmit}>\r\n          Title: <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.handleChange}/>\r\n          <br/>\r\n          <textarea name=\"content\" rows=\"15\" cols=\"50\" value={this.state.content} onChange={this.handleChange}/>\r\n          <br/>\r\n          Latitude: <input type=\"text\" name=\"latitude\" value={this.state.latitude} onChange={this.handleChange}/>\r\n          Longitude: <input type=\"text\" name=\"longitude\" value={this.state.longitude} onChange={this.handleChange}/>\r\n          <br/>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { title, content } = this.state;\r\n    const user = STITCH_CLIENT.auth.user;\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"dm-posts\");\r\n    const { latitude, longitude } = this.state;\r\n    const location = { type: \"Point\", coordinates: [ parseFloat(longitude), parseFloat(latitude) ] };\r\n    collection.insertOne({owner_id: user.id, title, content, interested: [], location: location}).then(() => this.props.history.push('/posts'));\r\n  }\r\n}\r\n\r\nexport default NewPost;","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout } from \"./Layout\";\r\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\r\n\r\nfunction kmToMiles(km) {\r\n  return km * 0.621371;\r\n}\r\n\r\nfunction deg2rad(deg) {\r\n  return deg * (Math.PI/180)\r\n}\r\n\r\nfunction getDistanceFromLatLonInMiles(lat1,lon1,lat2,lon2) {\r\n    var R = 6371; // Radius of the earth in km\r\n    var dLat = deg2rad(lat2-lat1);  // deg2rad below\r\n    var dLon = deg2rad(lon2-lon1); \r\n    var a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2)\r\n      ; \r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n    var d = R * c; // Distance in km\r\n    return d;\r\n  }\r\n\r\nexport class PostContent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '', \r\n      content: \"\",\r\n      distance: 0,\r\n      postFound: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.props._id);\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"dm-posts\");\r\n    const cursor = collection.find({_id: this.props._id});\r\n    cursor.asArray().then((postContent) => {\r\n      console.log(postContent);\r\n      if (!postContent || postContent.length === 0) {\r\n        this.setState({postFound: false});\r\n        return;\r\n      }\r\n      postContent = postContent[0];\r\n      const distance = getDistanceFromLatLonInMiles(\r\n        this.props.userLatitude, \r\n        this.props.userLongitude,\r\n        postContent.location.coordinates[1],\r\n        postContent.location.coordinates[0],\r\n      );\r\n      this.setState({\r\n        title: postContent.title,\r\n        content: postContent.content,\r\n        distance: distance,\r\n        postFound: true,\r\n      });\r\n    });\r\n    \r\n  }\r\n\r\n  render() {\r\n    let content = (\r\n      <div>\r\n        <h1>Post not found!</h1>\r\n      </div>\r\n    );\r\n    if (this.state.postFound) {\r\n      content = (\r\n        <div onClick={()=>this.viewPost()}>\r\n          <h1>{this.state.title}</h1>\r\n          <b>Distance: {this.state.distance.toFixed(2)} miles</b>\r\n          <p>{this.state.content}</p> \r\n        </div>\r\n      )\r\n    }\r\n    \r\n    return content;\r\n  }\r\n\r\n  viewPost = () => {\r\n    const title = `Notification: ${this.state.title}`;\r\n    const content = \"random notification content\";\r\n    const user = STITCH_CLIENT.auth.user;\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"notifications\");\r\n    collection.insertOne({owner_id: user.id, title, content, date: new Date()});\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Layout } from \"./Layout\";\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { PostContent } from \"./PostContent\";\r\nclass PostStream extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      postIDs: [],\r\n      locationSet: false,\r\n      latitude: 0,\r\n      longitude: 0,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.updateDistance);\r\n  }\r\n\r\n  updateDistance = (position) => {\r\n    if (this.state.locationSet) {\r\n      return;\r\n    }\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"dm-posts\");\r\n    const geospatialQuery = {\r\n      location: {\r\n        \"$near\": {\r\n          \"$geometry\": {\r\n            type: \"Point\" ,\r\n            coordinates: [ position.coords.longitude , position.coords.latitude ]\r\n          },\r\n       },\r\n      }\r\n    };\r\n    collection.find(geospatialQuery, {_id: 1, limit: 10}).asArray().then((postIDs) => {\r\n      this.setState({\r\n        postIDs: postIDs,\r\n        locationSet: true,\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        {/* Check to see if any items are found*/}\r\n        {this.state.postIDs.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {this.state.postIDs.map((post) => {\r\n              return(\r\n                <div key={post._id}>\r\n                  <PostContent _id={post._id} userLatitude={this.state.latitude} userLongitude={this.state.longitude}/>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>No Posts Found</h2>\r\n          </div>\r\n        )\r\n      }\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default PostStream;","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout } from \"./Layout\";\r\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\r\n\r\nexport class NotificationContent extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>{this.props.title}</h2>\r\n        <b>{this.props.date}</b>\r\n        <p>{this.props.content}</p> \r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Layout } from \"./Layout\";\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { NotificationContent } from \"./NotificationContent\";\r\nclass NotificationStream extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      notifications: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.updateDistance);\r\n  }\r\n\r\n  updateDistance = (position) => {\r\n    if (this.state.locationSet) {\r\n      return;\r\n    }\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"notifications\");\r\n    const cursor = collection.find({}, {\"sort\": {\"date\": -1}});\r\n    console.log(cursor);\r\n    cursor.asArray().then((notifications) => {\r\n      console.log(notifications);\r\n      this.setState({\r\n        notifications: notifications,\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        {/* Check to see if any items are found*/}\r\n        {this.state.notifications.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {this.state.notifications.map((notification) => {\r\n              const { title, date, content } = notification;\r\n              return(\r\n                <div key={notification._id}>\r\n                  <NotificationContent title={title} date={date.toString()} content={content}/>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>You have no notifications</h2>\r\n          </div>\r\n        )\r\n      }\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default NotificationStream;","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Stitch, RemoteMongoClient } from \"mongodb-stitch-browser-sdk\";\nimport './App.css';\nimport Home from './pages/Home';\nimport List from './pages/List';\nimport Registration from \"./pages/Registration\";\nimport NewPost from \"./pages/NewPost\";\nimport PostStream from \"./pages/PostStream\";\nimport NotificationStream from \"./pages/NotificationStream\";\n\nconst APP_ID = \"gather-your-party-qnzcm\";\nexport const STITCH_CLIENT = Stitch.initializeDefaultAppClient(APP_ID);\nexport const MDB = STITCH_CLIENT.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas');\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/list' component={List}/>\n          <Route path=\"/register\" component={Registration}/>\n          <Route path=\"/new-post\" component={NewPost}/>\n          <Route path=\"/posts\" component={PostStream}/>\n          <Route path=\"/notifications\" component={NotificationStream}/>\n        </Switch>\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport './index.css';\nimport App from './App/App';\n\nrender((\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}