{"version":3,"sources":["serviceWorker.js","App/pages/Layout.js","App/pages/Home.js","App/pages/List.js","App/pages/Registration.js","App/pages/NewPost.js","App/pages/PostContent.js","App/pages/PostComments.js","App/pages/PostStream.js","App/pages/NotificationContent.js","App/pages/NotificationStream.js","App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Layout","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","HeaderWithRouter","props","children","Layout_Footer","Component","Header","_this","call","updateLoggedIn","setState","loggedIn","STITCH_CLIENT","auth","isLoggedIn","loggedInEmail","user","profile","data","email","getLoginOrLogout","state","onClick","logout","style","color","loginErrorMessage","onSubmit","handleSubmit","type","name","onChange","handleChange","password","Link","to","then","history","push","event","target","defineProperty","preventDefault","_this$state","credential","UserPasswordCredential","loginWithCredential","authedId","console","log","concat","loginSuccess","catch","err","loginError","error","errorMessage","loginOrOut","withRouter","Footer","Home","className","Layout_Layout","variant","List","getList","list","length","map","item","Registration","confirmPassword","Stitch","defaultAppClient","getProviderClient","UserPasswordAuthProviderClient","factory","registerWithEmail","registerError","registerErrorMessage","message","resendConfirmationEmail","NewPost","title","content","collection","MDB","db","_this$state2","latitude","longitude","coordinates","parseFloat","insertOne","owner_id","id","owner_name","interested","_this2","navigator","geolocation","getCurrentPosition","position","coords","rows","cols","deg2rad","deg","Math","PI","PostContent","tryComment","showCommentBox","leaveComment","comment","post_id","_id","commenter","commentContent","date","Date","approved","notifications","commentRefresh","distance","postFound","find","asArray","postContent","lat1","lon1","lat2","lon2","dLat","dLon","sin","cos","atan2","sqrt","getDistanceFromLatLonInMiles","userLatitude","userLongitude","refresh","_this3","toFixed","PostComments","comments","render","PostComments_PostComment","postOwnerId","toString","postTitle","setCommentsPointer","assertThisInitialized","PostComment","acceptComment","updateMany","$set","originalContent","viewer_id","PostStream","updateDistance","locationSet","geospatialQuery","$near","$geometry","limit","postIDs","forceRefresh","i","commentsPointers","cp","post","PostContent_PostContent","PostComments_PostComments","NotificationContent","NotificationStream","user_id","cursor","sort","notification","link","NotificationContent_NotificationContent","initializeDefaultAppClient","getServiceClient","RemoteMongoClient","App","Switch","Route","exact","path","component","BrowserRouter","basename","process","src_App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d916d737.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from \"react-router\";\r\nimport { Stitch, UserPasswordCredential } from \"mongodb-stitch-browser-sdk\";\r\nexport class Layout extends Component {\r\n  render() {\r\n      return(\r\n         <div>\r\n            <HeaderWithRouter />\r\n               { this.props.children }\r\n            <Footer />\r\n         </div>\r\n      );\r\n  }\r\n}\r\n\r\nclass Header extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      loggedIn: false,\r\n      loggedInEmail: \"\",\r\n      loginErrorMessage: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateLoggedIn();\r\n  }\r\n\r\n  updateLoggedIn = () => {\r\n    this.setState({loggedIn: STITCH_CLIENT.auth.isLoggedIn});\r\n    if (STITCH_CLIENT.auth.isLoggedIn) {\r\n      this.setState({loggedInEmail: STITCH_CLIENT.auth.user.profile.data.email});\r\n    } else {\r\n      this.setState({loggedInEmail: \"\"});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const loginOrOut = this.getLoginOrLogout();\r\n      return (\r\n          <div>\r\n            <h1>Gather Your Party!</h1>\r\n            {loginOrOut}\r\n            <Link to={'./'}>Home</Link>\r\n          </div>\r\n        );\r\n  }\r\n\r\n  getLoginOrLogout = () => {\r\n    if (!this.state.loggedIn) {\r\n      return (\r\n      <div>\r\n      <p style={{color: \"red\"}}>{this.state.loginErrorMessage}</p>\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          E-mail:\r\n          <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n          Password:\r\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n       <Link to={'./register'}>Register</Link>\r\n      </div>)\r\n    }\r\n    return (\r\n      <div>\r\n      <b>Hello {this.state.loggedInEmail}!</b>\r\n      <button onClick={this.logout}>Logout</button>\r\n      </div>\r\n      );\r\n  }\r\n\r\n  logout = () => {\r\n    STITCH_CLIENT.auth.logout().then(() => {\r\n      this.updateLoggedIn()\r\n      this.props.history.push('/')\r\n    });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { email, password } = this.state;\r\n    const credential = new UserPasswordCredential(email, password);\r\n    STITCH_CLIENT\r\n      .auth\r\n      .loginWithCredential(credential).then(authedId => {\r\n         console.log(`successfully logged in with id: ${authedId}`)\r\n      }).then(() => this.loginSuccess())\r\n      .catch(err => this.loginError(err));\r\n  }\r\n\r\n  loginSuccess = () => {\r\n    this.updateLoggedIn();\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: \"\"});\r\n  }\r\n\r\n  loginError = (err) => {\r\n    console.error(`login error: ${err}`);\r\n    const errorMessage = `login error: ${err}`;\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: errorMessage});\r\n  }\r\n}\r\n\r\nconst HeaderWithRouter = withRouter(Header);\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n      return (<p>Copyright 2018</p>);\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { STITCH_CLIENT } from \"../App\";\r\nimport { Layout } from \"./Layout\";\r\n\r\nclass Home extends Component {\r\n  \r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <Layout>\r\n          {/* Link to List.js */}\r\n          <Link to={'./new-post'}>\r\n            <button variant=\"raised\">\r\n                Find Adventurers!\r\n            </button>\r\n          </Link>\r\n          <Link to={'./posts'}>\r\n            <button variant=\"raised\">\r\n                Find Campaigns!\r\n            </button>\r\n          </Link>\r\n          <Link to={'./notifications'}>\r\n            <button variant=\"raised\">\r\n                Notifications\r\n            </button>\r\n          </Link>  \r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Layout } from \"./Layout\";\r\n\r\nclass List extends Component {\r\n  // Initialize the state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      list: []\r\n    }\r\n  }\r\n\r\n  // Fetch the list on first mount\r\n  componentDidMount() {\r\n    this.getList();\r\n  }\r\n\r\n  // Retrieves the list of items from the Express app\r\n  getList = () => {\r\n    this.setState({list: [\"hello\", \"world\", \"okay\"]});\r\n  }\r\n\r\n  render() {\r\n    const { list } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <h1>List of Items</h1>\r\n        {/* Check to see if any items are found*/}\r\n        {list.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {list.map((item) => {\r\n              return(\r\n                <div>\r\n                  {item}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>No List Items Found</h2>\r\n          </div>\r\n        )\r\n      }\r\n      </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\r\nimport { Layout } from \"./Layout\";\r\nimport { STITCH_CLIENT } from \"../App\";\r\nimport { Stitch, UserPasswordAuthProviderClient } from \"mongodb-stitch-browser-sdk\";\r\nclass Registration extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      loggedIn: false,\r\n      registerErrorMessage: \"\",\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <p style={{color: \"red\"}}>{this.state.registerErrorMessage}</p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            E-mail:\r\n            <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n            Password:\r\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n            Confirm Password:\r\n            <input type=\"password\" name=\"confirmPassword\" value={this.state.confirmPassword} onChange={this.handleChange} />\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { email, password, confirmPassword } = this.state;\r\n    if (password !== confirmPassword) {\r\n      this.setState({registerErrorMessage: \"Passwords did not match.\"});\r\n      return;\r\n    }\r\n    // const credential = new UserPasswordCredential(email, password);\r\n    // STITCH_CLIENT\r\n    //   .auth\r\n    //   .loginWithCredential(credential).then(authedId => {\r\n    //      console.log(`successfully logged in with id: ${authedId}`)\r\n    //   }).then(() => this.loginSuccess())\r\n    //   .catch(err => this.loginError(err));\r\n    const emailPassClient = Stitch.defaultAppClient.auth\r\n      .getProviderClient(UserPasswordAuthProviderClient.factory);\r\n\r\n    emailPassClient.registerWithEmail(email, password)\r\n      .then(() => {\r\n         console.log(\"Successfully sent account confirmation email!\");\r\n         this.props.history.push('/');\r\n      })\r\n      .catch(err => {\r\n         console.log(\"Error registering new user:\", err);\r\n         this.registerError(err);\r\n      });\r\n  }\r\n\r\n  loginSuccess = () => {\r\n    this.updateLoggedIn();\r\n    this.setState({email: \"\", password: \"\", loginErrorMessage: \"\"});\r\n  }\r\n\r\n  registerError = (err) => {\r\n    if (err.message === \"name already in use\") {\r\n      const emailPassClient = Stitch.defaultAppClient.auth\r\n        .getProviderClient(UserPasswordAuthProviderClient.factory);\r\n      emailPassClient.resendConfirmationEmail(this.state.email);\r\n    } else {\r\n      const errorMessage = `login error: ${err}`;\r\n      this.setState({loginErrorMessage: errorMessage});\r\n    }\r\n    this.setState({email: \"\", password: \"\", confirmPassword: \"\"});\r\n  }\r\n}\r\nexport default Registration;","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout } from \"./Layout\";\r\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\r\nclass NewPost extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '', \r\n      content: \"Describe your campaign here!\",\r\n      latitude: 0,\r\n      longitude: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.setState({\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      })\r\n    });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        <form onSubmit={this.handleSubmit}>\r\n          Title: <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.handleChange}/>\r\n          <br/>\r\n          <textarea name=\"content\" rows=\"15\" cols=\"50\" value={this.state.content} onChange={this.handleChange}/>\r\n          <br/>\r\n          Latitude: <input type=\"text\" name=\"latitude\" value={this.state.latitude} onChange={this.handleChange}/>\r\n          Longitude: <input type=\"text\" name=\"longitude\" value={this.state.longitude} onChange={this.handleChange}/>\r\n          <br/>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { title, content } = this.state;\r\n    const user = STITCH_CLIENT.auth.user;\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"dm-posts\");\r\n    const { latitude, longitude } = this.state;\r\n    const location = { type: \"Point\", coordinates: [ parseFloat(longitude), parseFloat(latitude) ] };\r\n    collection.insertOne({owner_id: user.id, owner_name: user.profile.data.email, title, content, interested: [], location: location}).then(() => this.props.history.push('/posts'));\r\n  }\r\n}\r\n\r\nexport default NewPost;","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout } from \"./Layout\";\r\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\r\n\r\nfunction kmToMiles(km) {\r\n  return km * 0.621371;\r\n}\r\n\r\nfunction deg2rad(deg) {\r\n  return deg * (Math.PI/180)\r\n}\r\n\r\nfunction getDistanceFromLatLonInMiles(lat1,lon1,lat2,lon2) {\r\n    var R = 6371; // Radius of the earth in km\r\n    var dLat = deg2rad(lat2-lat1);  // deg2rad below\r\n    var dLon = deg2rad(lon2-lon1); \r\n    var a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2)\r\n      ; \r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n    var d = R * c; // Distance in km\r\n    return d;\r\n  }\r\n\r\nexport class PostContent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '', \r\n      content: \"\",\r\n      distance: 0,\r\n      owner_id: \"\",\r\n      owner_name: \"\",\r\n      postFound: false,\r\n      showCommentBox: false,\r\n      commentContent: \"\",\r\n    };\r\n  }\r\n\r\n  refresh() {\r\n    console.log(this.props._id);\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"dm-posts\");\r\n    const cursor = collection.find({_id: this.props._id});\r\n    cursor.asArray().then((postContent) => {\r\n      console.log(postContent);\r\n      if (!postContent || postContent.length === 0) {\r\n        this.setState({postFound: false});\r\n        return;\r\n      }\r\n      postContent = postContent[0];\r\n      const distance = getDistanceFromLatLonInMiles(\r\n        this.props.userLatitude, \r\n        this.props.userLongitude,\r\n        postContent.location.coordinates[1],\r\n        postContent.location.coordinates[0],\r\n      );\r\n      this.setState({\r\n        title: postContent.title,\r\n        content: postContent.content,\r\n        distance: distance,\r\n        postFound: true,\r\n        owner_id: postContent.owner_id,\r\n        owner_name: postContent.owner_name,\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refresh();\r\n  }\r\n\r\n  render() {\r\n    let content = (\r\n      <div>\r\n        <h1>Post not found!</h1>\r\n      </div>\r\n    );\r\n    if (this.state.postFound) {\r\n      content = (\r\n        <div onClick={()=>this.tryComment()}>\r\n          <hr/>\r\n          <h1>{this.state.title}</h1>\r\n          <b>{this.state.owner_name}</b>\r\n          <br/>\r\n          <b>Distance: {this.state.distance.toFixed(2)} miles</b>\r\n          <p>{this.state.content}</p>\r\n          {this.state.showCommentBox ? (\r\n            <form onSubmit={this.leaveComment}>\r\n              <textarea name=\"commentContent\" rows=\"5\" cols=\"50\" value={this.state.commentContent} onChange={this.handleChange}/>\r\n              <br/>\r\n              <input type=\"submit\" value=\"Apply\" />\r\n            </form>\r\n            ) : null}\r\n        </div>\r\n\r\n      )\r\n    }\r\n    \r\n    return content;\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  tryComment = () => {\r\n    this.setState({showCommentBox: true});\r\n  }\r\n\r\n  leaveComment = (event) => {\r\n    event.preventDefault();\r\n    const user = STITCH_CLIENT.auth.user;\r\n\r\n    const comment = {post_id: this.props._id, owner_id: user.id, commenter: user.profile.data.email, content: this.state.commentContent, date: new Date(), approved: false};\r\n    console.log(comment);\r\n    console.log(this.props._id);\r\n    //owner_id: user.id, title, content, date: new Date()\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"comments\");\r\n    console.log(collection.insertOne(comment));\r\n    const notifications = MDB.db(\"gather-your-party\").collection(\"notifications\");\r\n    const content = `${user.profile.data.email} applied for \"${this.state.title}\"!`\r\n    notifications.insertOne({owner_id: this.state.owner_id, title: \"New Application!\", content: content, date: new Date()}).then(() => {\r\n      this.setState({showCommentBox: false, commentContent: \"\"});\r\n      this.props.commentRefresh();\r\n    })\r\n  }\r\n  // viewPost = () => {\r\n  //   const title = `Notification: ${this.state.title}`;\r\n  //   const content = \"random notification content\";\r\n  //   const user = STITCH_CLIENT.auth.user;\r\n  //   const collection = MDB.db(\"gather-your-party\").collection(\"notifications\");\r\n  //   collection.insertOne({owner_id: user.id, title, content, date: new Date()});\r\n  // }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout } from \"./Layout\";\r\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\r\n\r\nexport class PostComments extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      comments: [],\r\n    }\r\n    this.props.setCommentsPointer(this);\r\n  }\r\n\r\n  refresh = () => {\r\n    console.log(\"gg refresh called!\");\r\n    console.log(this.props);\r\n    console.log(this.props._id);\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"comments\");\r\n    const cursor = collection.find({post_id: this.props._id});\r\n    cursor.asArray().then((comments) => {\r\n      console.log(comments);\r\n      this.setState({comments: comments});\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refresh();\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div>\r\n     {this.state.comments.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {this.state.comments.map((comment) => {\r\n              const { _id, post_id, owner_id, commenter, date, content, approved } = comment;\r\n              return(\r\n                <div key={_id}> {/*This assumes commenter is unique btw*/}\r\n                  <PostComment post_id={post_id} owner_id={owner_id} postOwnerId={this.props.postOwnerId} \r\n                    commenter={commenter} content={content} date={date.toString()} \r\n                    approved={approved} refresh={this.refresh} postTitle={this.props.postTitle}/>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h4>No Comments Found</h4>\r\n          </div>\r\n        )\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nclass PostComment extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const viewer_id = STITCH_CLIENT.auth.user.id;\r\n    console.log(viewer_id);\r\n    const color = this.props.approved && (this.props.postOwnerId === viewer_id || this.props.owner_id === viewer_id) ? \"green\" : \"black\";\r\n    console.log(color);\r\n    return (\r\n      <div>\r\n        <b style={{color: color}}>{this.props.commenter}</b>\r\n        <br/>\r\n        <b>{this.props.date}</b>\r\n        <p>{this.props.content}</p>\r\n        {this.props.postOwnerId === viewer_id && this.props.postOwnerId !== this.props.owner_id && !this.props.approved ? \r\n          (<div><button onClick={this.acceptComment}>Accept</button></div>)\r\n          : null\r\n        } \r\n      </div>\r\n    )\r\n  }\r\n\r\n  acceptComment = () => {\r\n    //this.setState({approved: true});\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"comments\");\r\n      collection.updateMany({owner_id: this.props.owner_id, post_id: this.props.post_id}, {\"$set\": {approved: true}}).then(() => {\r\n        this.props.refresh()\r\n        const notifications = MDB.db(\"gather-your-party\").collection(\"notifications\");\r\n        const content = `You've been accepted to join \"${this.props.postTitle}\"! Let the adventures begin!`;\r\n        notifications.insertOne({owner_id: this.props.owner_id, originalContent: `post_${this.props.post_id}`,  title: `You've Been Accepted!`, content: content, date: new Date()}).then(() => {\r\n      })\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Layout } from \"./Layout\";\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { PostContent } from \"./PostContent\";\r\nimport { PostComments } from \"./PostComments\";\r\nclass PostStream extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      postIDs: [],\r\n      locationSet: false,\r\n      latitude: 0,\r\n      longitude: 0,\r\n      commentsPointers: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.updateDistance);\r\n  }\r\n\r\n  updateDistance = (position) => {\r\n    if (this.state.locationSet) {\r\n      return;\r\n    }\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"dm-posts\");\r\n    const geospatialQuery = {\r\n      location: {\r\n        \"$near\": {\r\n          \"$geometry\": {\r\n            type: \"Point\" ,\r\n            coordinates: [ position.coords.longitude , position.coords.latitude ]\r\n          },\r\n       },\r\n      }\r\n    };\r\n    collection.find(geospatialQuery, {_id: 1, limit: 10}).asArray().then((postIDs) => {\r\n      this.setState({\r\n        postIDs: postIDs,\r\n        locationSet: true,\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      })\r\n    });\r\n  }\r\n\r\n  forceRefresh = () => {\r\n    for (var i = this.state.commentsPointers.length - 1; i >= 0; i--) {\r\n      const cp = this.state.commentsPointers[i];\r\n      if (cp)\r\n        cp.refresh();\r\n    }\r\n  }\r\n\r\n  setCommentsPointer = (comments) => {\r\n    this.state.commentsPointers.push(comments);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        {/* Check to see if any items are found*/}\r\n        {this.state.postIDs.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {this.state.postIDs.map((post) => {\r\n              return(\r\n                <div key={post._id} id={`post_${post._id}`}>\r\n                  <PostContent _id={post._id} userLatitude={this.state.latitude} userLongitude={this.state.longitude} commentRefresh={this.forceRefresh}/>\r\n                  <br/>\r\n                  <PostComments _id={post._id} postTitle={post.title} postOwnerId={post.owner_id} setCommentsPointer={this.setCommentsPointer}/>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>No Posts Found</h2>\r\n          </div>\r\n        )\r\n      }\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default PostStream;","import React, { Component } from 'react';\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { Layout } from \"./Layout\";\r\nimport { Stitch } from \"mongodb-stitch-browser-sdk\";\r\nimport { HashLink } from 'react-router-hash-link';\r\n\r\nexport class NotificationContent extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <hr/>\r\n        <h2>{this.props.title}</h2>\r\n        <b>{this.props.date}</b>\r\n        <p>{this.props.content}</p> \r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Layout } from \"./Layout\";\r\nimport { STITCH_CLIENT, MDB } from \"../App\";\r\nimport { NotificationContent } from \"./NotificationContent\";\r\nclass NotificationStream extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      notifications: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.updateDistance);\r\n  }\r\n\r\n  updateDistance = (position) => {\r\n    if (this.state.locationSet) {\r\n      return;\r\n    }\r\n    const user_id = STITCH_CLIENT.auth.user.id;\r\n    const collection = MDB.db(\"gather-your-party\").collection(\"notifications\");\r\n    const cursor = collection.find({owner_id: user_id}, {\"sort\": {\"date\": -1}});\r\n    console.log(cursor);\r\n    cursor.asArray().then((notifications) => {\r\n      console.log(notifications);\r\n      this.setState({\r\n        notifications: notifications,\r\n      })\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Layout>\r\n        {/* Check to see if any items are found*/}\r\n        {this.state.notifications.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {this.state.notifications.map((notification) => {\r\n              const { title, date, content, originalContent } = notification;\r\n              const link = `/posts#${originalContent}`;\r\n              return(\r\n                <div key={notification._id}>\r\n                    <NotificationContent link={link} title={title} date={date.toString()} content={content}/>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h2>You have no notifications</h2>\r\n          </div>\r\n        )\r\n      }\r\n      </Layout>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default NotificationStream;","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Stitch, RemoteMongoClient } from \"mongodb-stitch-browser-sdk\";\nimport './App.css';\nimport Home from './pages/Home';\nimport List from './pages/List';\nimport Registration from \"./pages/Registration\";\nimport NewPost from \"./pages/NewPost\";\nimport PostStream from \"./pages/PostStream\";\nimport NotificationStream from \"./pages/NotificationStream\";\n\nconst APP_ID = \"gather-your-party-qnzcm\";\nexport const STITCH_CLIENT = Stitch.initializeDefaultAppClient(APP_ID);\nexport const MDB = STITCH_CLIENT.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas');\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/list' component={List}/>\n          <Route path=\"/register\" component={Registration}/>\n          <Route path=\"/new-post\" component={NewPost}/>\n          <Route path=\"/posts\" component={PostStream}/>\n          <Route path=\"/notifications\" component={NotificationStream}/>\n        </Switch>\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport './index.css';\nimport App from './App/App';\n\nrender((\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}